#! /usr/bin/env python

# Copyright (C) 2013 Sven Klomp (mail@klomp.eu)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA  02110-1301, USA.

import os.path
import shutil
import re

from scissor import parameter
from scissor import config
from scissor import otr
from scissor import cut
from scissor.cut import cutlistat
from scissor.move import regexmove as move
from scissor import error



import logging
logger = logging.getLogger()

def tryDecoding(file, configdata):
    (base, extension) = os.path.splitext(abs_inputfile)
    if (extension==".otrkey"):
        uncut_avi=otr.decode(abs_inputfile, configdata)
        shutil.move(abs_inputfile, configdata["working_dir"])
    else:
        uncut_avi = abs_inputfile
        
    return uncut_avi

def rateCut(file):
    pattern = re.compile(".*_cutlistat([0-9]+).*")
    match = pattern.match(file)
    
    if (match):
        cutlistid=int(match.group(1))
        logger.debug(cutlistid)
        rating=False
    
        while (rating is False):
            rating = input("Rate cut of file {0} --> ".format(file))
            try:
                rating = int(rating)
            except ValueError:
                print("Enter a valid number between 0 and 5.")
                rating=False
            else:
                if (rating<0 or rating>5):
                    print("Enter a number between 0 and 5.")
                    rating=False
        
        cutlistat.rateCutList(cutlistid, rating)
        
    else:
        logger.warning("No cutlist ID embedded in filename {0}".format(file))


if __name__ == '__main__':
    options = parameter.parse()
    configdata=config.readConfig(options.configfile)
    
    for inputfile in options.files:
        if (os.path.exists(inputfile)):
            logger.info("Working on {0}".format(inputfile))
            
            abs_inputfile = os.path.abspath(inputfile)
            
            
            if options.rate:
                rateCut(abs_inputfile)
            else:
                uncut_avi = tryDecoding(abs_inputfile, configdata["otr"])
        
                #Cutting and renaming
                if options.cut:        
                    cut_avi = cut.cut(uncut_avi, configdata["cut"])
                else:
                    cut_avi = uncut_avi
                
                #Moving
                if options.move:
                    move.move(cut_avi, configdata["move"])
        else:
            logger.warning("File not found: {0}".format(inputfile))

